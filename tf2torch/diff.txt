diff --git a/models/tracknet.py b/models/tracknet.py
index 6d33c13..621b862 100644
--- a/models/tracknet.py
+++ b/models/tracknet.py
@@ -4,22 +4,22 @@ from torch import nn
 from torchsummary import summary
 
 
+# 将BN的维度以参数的形式传入
 class Conv(nn.Module):
-    def __init__(self, ic, oc, k=(3,3), p="same", act=True):
+    def __init__(self, ic, oc, bc, k=(3,3), p="same", act=True):
         super().__init__()
         self.conv = nn.Conv2d(ic, oc, kernel_size=k, padding=p)
-        self.bn = nn.BatchNorm2d(oc)
+        self.bn = nn.BatchNorm2d(bc)
         self.act = nn.ReLU() if act else nn.Identity()
 
-        # self.convs = nn.Sequential(
-        #     nn.Conv2d(ic, oc, kernel_size=k, padding=p),
-        #     nn.ReLU(),
-        #     nn.BatchNorm2d(oc),
-        # )
-
     def forward(self, x):
-        return self.bn(self.act(self.conv(x)))      # 和relu-bn-conv不一样？
-        #return self.convs(x)
+        x = self.act(self.conv(x))
+
+        x = x.transpose(1, 3)    #  NCHW ---> NWHC
+        x = self.bn(x)
+        x = x.transpose(1, 3)    #  NCHW <--- NWHC
+
+        return x
 
 
 class TrackNet(nn.Module):
@@ -28,42 +28,42 @@ class TrackNet(nn.Module):
 
         # VGG16
         # self.conv2d_1 = Conv(3, 64)   输入3张灰度图
-        self.conv2d_1 = Conv(9, 64)     # 输入3张RGB图
-        self.conv2d_2 = Conv(64, 64)
+        self.conv2d_1 = Conv(9, 64, 512)     # 输入3张RGB图
+        self.conv2d_2 = Conv(64, 64, 512)
         self.max_pooling_1 = nn.MaxPool2d((2,2), stride=(2,2))
 
-        self.conv2d_3 = Conv(64, 128)
-        self.conv2d_4 = Conv(128, 128)
+        self.conv2d_3 = Conv(64, 128, 256)
+        self.conv2d_4 = Conv(128, 128, 256)
         self.max_pooling_2 = nn.MaxPool2d((2,2), stride=(2,2))
 
-        self.conv2d_5 = Conv(128, 256)
-        self.conv2d_6 = Conv(256, 256)
-        self.conv2d_7 = Conv(256, 256)
+        self.conv2d_5 = Conv(128, 256, 128)
+        self.conv2d_6 = Conv(256, 256, 128)
+        self.conv2d_7 = Conv(256, 256, 128)
         self.max_pooling_3 = nn.MaxPool2d((2,2), stride=(2,2))
 
-        self.conv2d_8 = Conv(256, 512)
-        self.conv2d_9 = Conv(512, 512)
-        self.conv2d_10 = Conv(512, 512)
+        self.conv2d_8 = Conv(256, 512, 64)
+        self.conv2d_9 = Conv(512, 512, 64)
+        self.conv2d_10 = Conv(512, 512, 64)
 
         # Deconv / UNet
         self.up_sampling_1 = nn.UpsamplingNearest2d(scale_factor=2)
         # concatenate_1 with conv2d_7, axis = 1
 
-        self.conv2d_11 = Conv(768, 256)
-        self.conv2d_12 = Conv(256, 256)
-        self.conv2d_13 = Conv(256, 256)
+        self.conv2d_11 = Conv(768, 256, 128)
+        self.conv2d_12 = Conv(256, 256, 128)
+        self.conv2d_13 = Conv(256, 256, 128)
 
         self.up_sampling_2 = nn.UpsamplingNearest2d(scale_factor=2)
         # concatenate_2 with conv2d_4, axis = 1
 
-        self.conv2d_14 = Conv(384, 128)
-        self.conv2d_15 = Conv(128, 128)
+        self.conv2d_14 = Conv(384, 128, 256)
+        self.conv2d_15 = Conv(128, 128, 256)
 
         self.up_sampling_3 = nn.UpsamplingNearest2d(scale_factor=2)
         # concatenate_3 with conv2d_2, axis = 1
 
-        self.conv2d_16 = Conv(192, 64)
-        self.conv2d_17 = Conv(64, 64)
+        self.conv2d_16 = Conv(192, 64, 512)
+        self.conv2d_17 = Conv(64, 64, 512)
         self.conv2d_18 = nn.Conv2d(64, 3, kernel_size=(1,1), padding='same')           # 输出3张图
         # self.conv2d_18 = Conv(64, 1, k=(1,1))           输出1张图
 
